const axios = require('axios');
const { EmbedBuilder } = require('discord.js');

module.exports = {
  data: {
    name: 'refresh'
  },
  async execute(message) {
    try {
      // Fonction pour rafra√Æchir la section de la biblioth√®que Plex
      async function refreshPlexLibrary() {
        // Remplace ces IDs par les IDs de tes sections de biblioth√®que
        const sectionIds = [2, 1]; // IDs des sections √† rafra√Æchir
        const promises = sectionIds.map(id =>
          axios.post(`${process.env.PLEX_SERVER_URL}/library/sections/${id}/refresh`, null, {
            headers: { 'X-Plex-Token': process.env.PLEX_TOKEN }
          })
        );
        await Promise.all(promises);
      }

      // Ex√©cuter l'actualisation
      await refreshPlexLibrary();

      // Cr√©ation d'un embed pour confirmer l'actualisation
      const embed = new EmbedBuilder()
        .setTitle('üîÑ Actualisation des Biblioth√®ques Plex')
        .setDescription('‚úÖ Les biblioth√®ques Plex ont √©t√© rafra√Æchies avec succ√®s.')
        .setColor('#2ECC71')
        .setTimestamp()
        .setFooter({ text: 'Bot Plex', iconURL: 'https://example.com/icon.png' }); // Remplace par l'URL de l'ic√¥ne de ton choix

      // Envoi de l'embed
      await message.channel.send({ embeds: [embed] });
    } catch (error) {
      console.error('Erreur lors de l\'actualisation des biblioth√®ques Plex :', error);

      // Cr√©ation d'un embed pour les erreurs
      const embed = new EmbedBuilder()
        .setTitle('üîÑ Actualisation des Biblioth√®ques Plex')
        .setDescription('‚ùå Une erreur est survenue lors de l\'actualisation des biblioth√®ques Plex.')
        .setColor('#FF0000')
        .setTimestamp()
        .setFooter({ text: 'Bot Plex', iconURL: 'https://example.com/icon.png' }); // Remplace par l'URL de l'ic√¥ne de ton choix

      // Envoi de l'embed
      await message.channel.send({ embeds: [embed] });
    }
  }
};
